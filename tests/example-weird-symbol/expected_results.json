{"version": 2, "status": "pass", "tests": [{"name": "empty list", "status": "pass", "output": null, "test_code": "(equal? (accumulate ,identity ()) ())\n"}, {"name": "identity", "status": "pass", "output": null, "test_code": "(equal? (accumulate ,identity (1 2 3)) (1 2 3))\n"}, {"name": "1+", "status": "pass", "output": null, "test_code": "(equal? (accumulate ,\\x31;+ (1 2 3)) (2 3 4))\n"}, {"name": "squares", "status": "pass", "output": null, "test_code": "(equal? (accumulate ,square (1 2 3)) (1 4 9))\n"}, {"name": "upcases", "status": "pass", "output": null, "test_code": "(equal?\n  (accumulate ,string-upcase (\"hello\" \"world\"))\n  (\"HELLO\" \"WORLD\"))\n"}, {"name": "reverse strings", "status": "pass", "output": null, "test_code": "(equal?\n  (accumulate\n    ,string-reverse\n    (\"the\" \"quick\" \"brown\" \"fox\" \"jumps\" \"over\" \"the\" \"lazy\"\n      \"dog\"))\n  (\"eht\" \"kciuq\" \"nworb\" \"xof\" \"spmuj\" \"revo\" \"eht\" \"yzal\"\n    \"god\"))\n"}, {"name": "length", "status": "pass", "output": null, "test_code": "(equal?\n  (accumulate ,length ((a b c) (((d))) (e (f (g (h))))))\n  (3 1 2))\n"}, {"name": "accumulate w/in accumulate", "status": "pass", "output": null, "test_code": "(equal?\n  (accumulate\n    ,(lambda (x)\n       (string-join\n         (accumulate (lambda (y) (string-append x y)) '(\"1\" \"2\" \"3\"))\n         \" \"))\n    (\"a\" \"b\" \"c\"))\n  (\"a1 a2 a3\" \"b1 b2 b3\" \"c1 c2 c3\"))\n"}]}