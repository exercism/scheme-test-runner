{"version": 2, "status": "fail", "tests": [{"name": "numbers just get pushed onto the stack", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 2 3 4 5\")) (5 4 3 2 1))\n"}, {"name": "can add two numbers", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 2 +\")) (3))\n"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(forth (\"+\"))\n"}, {"name": "errors if there is only one value on the stack", "status": "pass", "output": null, "test_code": "(forth (\"1 +\"))\n"}, {"name": "can subtract two numbers", "status": "pass", "output": null, "test_code": "(equal? (forth (\"3 4 -\")) (-1))\n"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(forth (\"-\"))\n"}, {"name": "errors if there is only one value on the stack", "status": "pass", "output": null, "test_code": "(forth (\"1 -\"))\n"}, {"name": "multiplying two numbers fails (testing the test runner)", "status": "fail", "output": null, "test_code": "(forth (\"2 4 *\"))\n", "message": "Expected error but got (8)"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(forth (\"*\"))\n"}, {"name": "errors if there is only one value on the stack", "status": "pass", "output": null, "test_code": "(forth (\"1 *\"))\n"}, {"name": "can divide two numbers", "status": "pass", "output": null, "test_code": "(equal? (forth (\"12 3 /\")) (4))\n"}, {"name": "performs integer division", "status": "pass", "output": null, "test_code": "(equal? (forth (\"8 3 /\")) (2))\n"}, {"name": "errors if dividing by zero", "status": "pass", "output": null, "test_code": "(forth (\"4 0 /\"))\n"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(forth (\"/\"))\n"}, {"name": "errors if there is only one value on the stack", "status": "pass", "output": null, "test_code": "(forth (\"1 /\"))\n"}, {"name": "addition and subtraction", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 2 + 4 -\")) (-1))\n"}, {"name": "multiplication and division", "status": "pass", "output": null, "test_code": "(equal? (forth (\"2 4 * 3 /\")) (2))\n"}, {"name": "copies a value on the stack", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 dup\")) (1 1))\n"}, {"name": "copies the top value on the stack", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 2 dup\")) (2 2 1))\n"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(forth (\"dup\"))\n"}, {"name": "removes the top value on the stack if it is the only one", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 drop\")) ())\n"}, {"name": "removes the top value on the stack if it is not the only one", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 2 drop\")) (1))\n"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(forth (\"drop\"))\n"}, {"name": "swaps the top two values on the stack if they are the only ones", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 2 swap\")) (1 2))\n"}, {"name": "swaps the top two values on the stack if they are not the only ones", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 2 3 swap\")) (2 3 1))\n"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(forth (\"swap\"))\n"}, {"name": "errors if there is only one value on the stack", "status": "pass", "output": null, "test_code": "(forth (\"1 swap\"))\n"}, {"name": "copies the second element if there are only two", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 2 over\")) (1 2 1))\n"}, {"name": "copies the second element if there are more than two", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 2 3 over\")) (2 3 2 1))\n"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(forth (\"over\"))\n"}, {"name": "errors if there is only one value on the stack", "status": "pass", "output": null, "test_code": "(forth (\"1 over\"))\n"}, {"name": "can consist of built-in words", "status": "pass", "output": null, "test_code": "(equal?\n  (forth (\": dup-twice dup dup ;\" \"1 dup-twice\"))\n  (1 1 1))\n"}, {"name": "execute in the right order", "status": "pass", "output": null, "test_code": "(equal? (forth (\": countup 1 2 3 ;\" \"countup\")) (3 2 1))\n"}, {"name": "can override other user-defined words", "status": "pass", "output": null, "test_code": "(equal?\n  (forth (\": foo dup ;\" \": foo dup dup ;\" \"1 foo\"))\n  (1 1 1))\n"}, {"name": "can override built-in words", "status": "pass", "output": null, "test_code": "(equal? (forth (\": swap dup ;\" \"1 swap\")) (1 1))\n"}, {"name": "can override built-in operators", "status": "pass", "output": null, "test_code": "(equal? (forth (\": + * ;\" \"3 4 +\")) (12))\n"}, {"name": "can use different words with the same name", "status": "pass", "output": null, "test_code": "(equal?\n  (forth (\": foo 5 ;\" \": bar foo ;\" \": foo 6 ;\" \"bar foo\"))\n  (6 5))\n"}, {"name": "can define word that uses word with the same name", "status": "pass", "output": null, "test_code": "(equal? (forth (\": foo 10 ;\" \": foo foo 1 + ;\" \"foo\")) (11))\n"}, {"name": "cannot redefine numbers", "status": "pass", "output": null, "test_code": "(forth (\": 1 2 ;\"))\n"}, {"name": "errors if executing a non-existent word", "status": "pass", "output": null, "test_code": "(forth (\"foo\"))\n"}, {"name": "DUP is case-insensitive", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 DUP Dup dup\")) (1 1 1 1))\n"}, {"name": "DROP is case-insensitive", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 2 3 4 DROP Drop drop\")) (1))\n"}, {"name": "SWAP is case-insensitive", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 2 SWAP 3 Swap 4 swap\")) (1 4 3 2))\n"}, {"name": "OVER is case-insensitive", "status": "pass", "output": null, "test_code": "(equal? (forth (\"1 2 OVER Over over\")) (1 2 1 2 1))\n"}, {"name": "user-defined words are case-insensitive", "status": "pass", "output": null, "test_code": "(equal? (forth (\": foo dup ;\" \"1 FOO Foo foo\")) (1 1 1 1))\n"}, {"name": "definitions are case-insensitive", "status": "pass", "output": null, "test_code": "(equal? (forth (\": SWAP DUP Dup dup ;\" \"1 swap\")) (1 1 1 1))\n"}]}