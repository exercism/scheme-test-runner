{"version": 2, "status": "pass", "tests": [{"name": "numbers just get pushed onto the stack", "status": "pass", "output": null, "test_code": "(test-success \"numbers just get pushed onto the stack\" equal? forth (quote ((\"1 2 3 4 5\"))) (quote (5 4 3 2 1)))"}, {"name": "can add two numbers", "status": "pass", "output": null, "test_code": "(test-success \"can add two numbers\" equal? forth (quote ((\"1 2 +\"))) (quote (3)))"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is nothing on the stack\" forth (quote ((\"+\"))))"}, {"name": "errors if there is only one value on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is only one value on the stack\" forth (quote ((\"1 +\"))))"}, {"name": "can subtract two numbers", "status": "pass", "output": null, "test_code": "(test-success \"can subtract two numbers\" equal? forth (quote ((\"3 4 -\"))) (quote (-1)))"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is nothing on the stack\" forth (quote ((\"-\"))))"}, {"name": "errors if there is only one value on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is only one value on the stack\" forth (quote ((\"1 -\"))))"}, {"name": "can multiply two numbers", "status": "pass", "output": null, "test_code": "(test-success \"can multiply two numbers\" equal? forth (quote ((\"2 4 *\"))) (quote (8)))"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is nothing on the stack\" forth (quote ((\"*\"))))"}, {"name": "errors if there is only one value on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is only one value on the stack\" forth (quote ((\"1 *\"))))"}, {"name": "can divide two numbers", "status": "pass", "output": null, "test_code": "(test-success \"can divide two numbers\" equal? forth (quote ((\"12 3 /\"))) (quote (4)))"}, {"name": "performs integer division", "status": "pass", "output": null, "test_code": "(test-success \"performs integer division\" equal? forth (quote ((\"8 3 /\"))) (quote (2)))"}, {"name": "errors if dividing by zero", "status": "pass", "output": null, "test_code": "(test-error \"errors if dividing by zero\" forth (quote ((\"4 0 /\"))))"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is nothing on the stack\" forth (quote ((\"/\"))))"}, {"name": "errors if there is only one value on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is only one value on the stack\" forth (quote ((\"1 /\"))))"}, {"name": "addition and subtraction", "status": "pass", "output": null, "test_code": "(test-success \"addition and subtraction\" equal? forth (quote ((\"1 2 + 4 -\"))) (quote (-1)))"}, {"name": "multiplication and division", "status": "pass", "output": null, "test_code": "(test-success \"multiplication and division\" equal? forth (quote ((\"2 4 * 3 /\"))) (quote (2)))"}, {"name": "copies a value on the stack", "status": "pass", "output": null, "test_code": "(test-success \"copies a value on the stack\" equal? forth (quote ((\"1 dup\"))) (quote (1 1)))"}, {"name": "copies the top value on the stack", "status": "pass", "output": null, "test_code": "(test-success \"copies the top value on the stack\" equal? forth (quote ((\"1 2 dup\"))) (quote (2 2 1)))"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is nothing on the stack\" forth (quote ((\"dup\"))))"}, {"name": "removes the top value on the stack if it is the only one", "status": "pass", "output": null, "test_code": "(test-success \"removes the top value on the stack if it is the only one\" equal? forth (quote ((\"1 drop\"))) (quote ()))"}, {"name": "removes the top value on the stack if it is not the only one", "status": "pass", "output": null, "test_code": "(test-success \"removes the top value on the stack if it is not the only one\" equal? forth (quote ((\"1 2 drop\"))) (quote (1)))"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is nothing on the stack\" forth (quote ((\"drop\"))))"}, {"name": "swaps the top two values on the stack if they are the only ones", "status": "pass", "output": null, "test_code": "(test-success \"swaps the top two values on the stack if they are the only ones\" equal? forth (quote ((\"1 2 swap\"))) (quote (1 2)))"}, {"name": "swaps the top two values on the stack if they are not the only ones", "status": "pass", "output": null, "test_code": "(test-success \"swaps the top two values on the stack if they are not the only ones\" equal? forth (quote ((\"1 2 3 swap\"))) (quote (2 3 1)))"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is nothing on the stack\" forth (quote ((\"swap\"))))"}, {"name": "errors if there is only one value on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is only one value on the stack\" forth (quote ((\"1 swap\"))))"}, {"name": "copies the second element if there are only two", "status": "pass", "output": null, "test_code": "(test-success \"copies the second element if there are only two\" equal? forth (quote ((\"1 2 over\"))) (quote (1 2 1)))"}, {"name": "copies the second element if there are more than two", "status": "pass", "output": null, "test_code": "(test-success \"copies the second element if there are more than two\" equal? forth (quote ((\"1 2 3 over\"))) (quote (2 3 2 1)))"}, {"name": "errors if there is nothing on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is nothing on the stack\" forth (quote ((\"over\"))))"}, {"name": "errors if there is only one value on the stack", "status": "pass", "output": null, "test_code": "(test-error \"errors if there is only one value on the stack\" forth (quote ((\"1 over\"))))"}, {"name": "can consist of built-in words", "status": "pass", "output": null, "test_code": "(test-success \"can consist of built-in words\" equal? forth (quote ((\": dup-twice dup dup ;\" \"1 dup-twice\"))) (quote (1 1 1)))"}, {"name": "execute in the right order", "status": "pass", "output": null, "test_code": "(test-success \"execute in the right order\" equal? forth (quote ((\": countup 1 2 3 ;\" \"countup\"))) (quote (3 2 1)))"}, {"name": "can override other user-defined words", "status": "pass", "output": null, "test_code": "(test-success \"can override other user-defined words\" equal? forth (quote ((\": foo dup ;\" \": foo dup dup ;\" \"1 foo\"))) (quote (1 1 1)))"}, {"name": "can override built-in words", "status": "pass", "output": null, "test_code": "(test-success \"can override built-in words\" equal? forth (quote ((\": swap dup ;\" \"1 swap\"))) (quote (1 1)))"}, {"name": "can override built-in operators", "status": "pass", "output": null, "test_code": "(test-success \"can override built-in operators\" equal? forth (quote ((\": + * ;\" \"3 4 +\"))) (quote (12)))"}, {"name": "can use different words with the same name", "status": "pass", "output": null, "test_code": "(test-success \"can use different words with the same name\" equal? forth (quote ((\": foo 5 ;\" \": bar foo ;\" \": foo 6 ;\" \"bar foo\"))) (quote (6 5)))"}, {"name": "can define word that uses word with the same name", "status": "pass", "output": null, "test_code": "(test-success \"can define word that uses word with the same name\" equal? forth (quote ((\": foo 10 ;\" \": foo foo 1 + ;\" \"foo\"))) (quote (11)))"}, {"name": "cannot redefine numbers", "status": "pass", "output": null, "test_code": "(test-error \"cannot redefine numbers\" forth (quote ((\": 1 2 ;\"))))"}, {"name": "errors if executing a non-existent word", "status": "pass", "output": null, "test_code": "(test-error \"errors if executing a non-existent word\" forth (quote ((\"foo\"))))"}, {"name": "DUP is case-insensitive", "status": "pass", "output": null, "test_code": "(test-success \"DUP is case-insensitive\" equal? forth (quote ((\"1 DUP Dup dup\"))) (quote (1 1 1 1)))"}, {"name": "DROP is case-insensitive", "status": "pass", "output": null, "test_code": "(test-success \"DROP is case-insensitive\" equal? forth (quote ((\"1 2 3 4 DROP Drop drop\"))) (quote (1)))"}, {"name": "SWAP is case-insensitive", "status": "pass", "output": null, "test_code": "(test-success \"SWAP is case-insensitive\" equal? forth (quote ((\"1 2 SWAP 3 Swap 4 swap\"))) (quote (1 4 3 2)))"}, {"name": "OVER is case-insensitive", "status": "pass", "output": null, "test_code": "(test-success \"OVER is case-insensitive\" equal? forth (quote ((\"1 2 OVER Over over\"))) (quote (1 2 1 2 1)))"}, {"name": "user-defined words are case-insensitive", "status": "pass", "output": null, "test_code": "(test-success \"user-defined words are case-insensitive\" equal? forth (quote ((\": foo dup ;\" \"1 FOO Foo foo\"))) (quote (1 1 1 1)))"}, {"name": "definitions are case-insensitive", "status": "pass", "output": null, "test_code": "(test-success \"definitions are case-insensitive\" equal? forth (quote ((\": SWAP DUP Dup dup ;\" \"1 swap\"))) (quote (1 1 1 1)))"}]}