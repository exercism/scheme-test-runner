{"version": 2, "status": "pass", "tests": [{"name": "no matches", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram \"diaper\" (\"hello\" \"world\" \"zombies\" \"pants\"))\n  ())\n"}, {"name": "detects two anagrams", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram \"master\" (\"stream\" \"pigeon\" \"maters\"))\n  (\"stream\" \"maters\"))\n"}, {"name": "does not detect anagram subsets", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram \"good\" (\"dog\" \"goody\"))\n  ())\n"}, {"name": "detects anagram", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram \"listen\" (\"enlists\" \"google\" \"inlets\" \"banana\"))\n  (\"inlets\"))\n"}, {"name": "detects three anagrams", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram\n    \"allergy\"\n    (\"gallery\" \"ballerina\" \"regally\" \"clergy\" \"largely\"\n      \"leading\"))\n  (\"gallery\" \"regally\" \"largely\"))\n"}, {"name": "detects multiple anagrams with different case", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram \"nose\" (\"Eons\" \"ONES\"))\n  (\"Eons\" \"ONES\"))\n"}, {"name": "does not detect non-anagrams with identical checksum", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram \"mass\" (\"last\"))\n  ())\n"}, {"name": "detects anagrams case-insensitively", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram\n    \"Orchestra\"\n    (\"cashregister\" \"Carthorse\" \"radishes\"))\n  (\"Carthorse\"))\n"}, {"name": "detects anagrams using case-insensitive subject", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram\n    \"Orchestra\"\n    (\"cashregister\" \"carthorse\" \"radishes\"))\n  (\"carthorse\"))\n"}, {"name": "detects anagrams using case-insensitive possible matches", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram\n    \"orchestra\"\n    (\"cashregister\" \"Carthorse\" \"radishes\"))\n  (\"Carthorse\"))\n"}, {"name": "does not detect an anagram if the original word is repeated", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram \"go\" (\"go Go GO\"))\n  ())\n"}, {"name": "anagrams must use all letters exactly once", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram \"tapper\" (\"patter\"))\n  ())\n"}, {"name": "words are not anagrams of themselves (case-insensitive)", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram \"BANANA\" (\"BANANA\" \"Banana\" \"banana\"))\n  ())\n"}, {"name": "words other than themselves can be anagrams", "status": "pass", "output": null, "test_code": "((lambda (xs ys)\n   (equal? (list-sort string<? xs) (list-sort string<? ys)))\n  (anagram \"LISTEN\" (\"Listen\" \"Silent\" \"LISTEN\"))\n  (\"Silent\"))\n"}]}